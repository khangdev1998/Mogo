@mixin bgc($bg: red) {
  background-color: $bg;
}

@mixin size($w, $h: $w) {
  width: $w;
  height: $h;
}

@mixin flexbox(
  $justify-content: flex-start,
  $direction: row,
  $align-items: stretch,
  $flex: flex,
  $wrap: nowrap
) {
  display: $flex;
  align-items: $align-items;
  justify-content: $justify-content;
  flex-direction: $direction;
  flex-wrap: $wrap;
}

@mixin flexbox2($config: ()) {
  $config: extend(
    (
      align-items: stretch,
      justify-content: flex-start,
      flex-direction: row,
      display: flex,
      flex-wrap: nowrap,
    ),
    $config
  );
  display: map-get($config, display);
  align-items: map-get($config, align-items);
  justify-content: map-get($config, justify-content);
  flex-direction: map-get($config, flex-direction);
  flex-wrap: map-get($config, flex-wrap);
}

@mixin blockCenter($direction: "left", $position: absolute) {
  position: $position;
  // Trường hợp canh ngang
  @if $direction == "left" {
    left: 50%;
    transform: translateX(-50%);
  }
  // Trường hợp canh dọc
  @if $direction == "top" {
    top: 50%;
    transform: translateY(-50%);
  }
  // Trường hợp cả 2 ngang và dọc
  @if $direction == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// Responsive screen PC Mobile
@mixin maxWidth($breakpoint) {
  @media only screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin minWidth($breakpoint) {
  @media only screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin minMaxWidth($min, $max) {
  @media only screen and (min-width: $min) and (max-width: $max) {
    @content;
  }
}

@mixin absoluteFull($bgc: transparent) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: $bgc;
}

@mixin scrollSnap($widthCol: 90%, $gap: 1.5rem, $direction: start) {
  display: grid;
  justify-content: flex-start;
  grid-auto-columns: $widthCol;
  grid-auto-flow: column;
  grid-gap: $gap;
  overflow: auto;
  overflow-y: hidden;
  scroll-snap-type: x mandatory;
  scroll-snap-stop: always;
  touch-action: manipulation;
  grid-template-columns: unset;
  &::-webkit-scrollbar {
    display: none;
  }
  & > * {
    scroll-snap-align: $direction;
  }
}

@mixin lineClamp($rows: 1, $size: 100%) {
  display: -webkit-box;
  -webkit-line-clamp: $rows;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-all;
  white-space: pre-wrap;
  max-width: $size;
  width: $size;
}

@mixin hoverEffect($toClass1, $toClass2, $notClass: "true") {
  #{$toClass1} {
    position: relative;
    z-index: 10;
    transition: all linear 0.25s;
    #{$toClass2} {
      @include absoluteFull(
        $bgc:
          linear-gradient(
            to bottom,
            rgba($primary-color, 0.8),
            rgba($secondary-color, 0.8)
          )
      );
      @include flexbox(
        $justify-content: center,
        $align-items: center,
        $direction: column
      );
      visibility: hidden;
      opacity: 0;
      transition: all ease-in 0.2s;
    }
    @if $notClass == "true" {
      &::before {
        content: "";
        @include absoluteFull($third-color);
        z-index: -1;
        transition: 0.4s;
      }
    }
    &:hover {
      #{$toClass2} {
        opacity: 1;
        cursor: pointer;
        visibility: visible;
      }
      @if $notClass == "true" {
        &::before {
          transform: translate(1rem, 1rem);
        }
        transform: translate(-1rem, -1rem);
      }
    }
  }
}
